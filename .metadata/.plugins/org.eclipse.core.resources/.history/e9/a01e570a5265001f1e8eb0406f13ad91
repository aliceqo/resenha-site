package resenha;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.DAO;
import model.Resenha;
import model.ResenhaDAO;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

@WebServlet("/editarExcluir")
public class editarExcluirResenha extends HttpServlet {
    private static final long serialVersionUID = 1L;
    private DAO dao = new DAO();

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        int id = Integer.parseInt(request.getParameter("id"));
        Resenha resenha = getResenhaById(id);

        request.setAttribute("resenha", resenha);
        request.getRequestDispatcher("editarResenha.html").forward(request, response);
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        int id = Integer.parseInt(request.getParameter("id"));
        String titulo = request.getParameter("titulo");
        String urlFoto = request.getParameter("url_foto");
        String idadeLeitura = request.getParameter("idade_leitura");
        String livro = request.getParameter("livro");
        String autor = request.getParameter("autor");
        String tradutor = request.getParameter("tradutor");
        String generos = request.getParameter("generos");
        String idioma = request.getParameter("idioma");
        String editora = request.getParameter("editora");
        int numeroPaginas = Integer.parseInt(request.getParameter("numero_paginas"));
        String fraseDestaque = request.getParameter("frase_destaque");
        String conteudoResenha = request.getParameter("conteudo_resenha");

        ResenhaDAO resenhaDAO = new ResenhaDAO();
        resenhaDAO.atualizarResenha(id, titulo, urlFoto, idadeLeitura, livro, autor, tradutor, generos, idioma, editora, numeroPaginas, fraseDestaque, conteudoResenha);

        response.sendRedirect("resenhas.html");
    }

    private Resenha getResenhaById(int id) {
        Resenha resenha = new Resenha();
        String query = "SELECT * FROM resenhas WHERE id = ?";

        try (Connection connection = dao.conectar();
             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setInt(1, id);
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    resenha.setId(resultSet.getInt("id"));
                    resenha.setUrlFoto(resultSet.getString("imagem"));
                    resenha.setTitulo(resultSet.getString("titulo"));
                    resenha.setIdadeLeitura(resultSet.getString("idade_leitura"));
                    resenha.setLivro(resultSet.getString("livro"));
                    resenha.setAutor(resultSet.getString("autor"));
                    resenha.setTradutor(resultSet.getString("tradutor"));
                    resenha.setGeneros(resultSet.getString("generos"));
                    resenha.setIdioma(resultSet.getString("idioma"));
                    resenha.setEditora(resultSet.getString("editora"));
                    resenha.setNumeroPaginas(resultSet.getInt("numero_paginas"));
                    resenha.setFraseDestaque(resultSet.getString("frase_destaque"));
                    resenha.setConteudoResenha(resultSet.getString("resenha"));
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return resenha;
    }
}
